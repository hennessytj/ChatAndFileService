$version: "2"
namespace com.computationista.userservice

@documentation("A service for managing users.")
@paginated(inputToken: "nextToken", outputToken: "nextToken",
           pageSize: "pageSize")
service UserService {
    version: "2021-08-29"
    resources: [User]
}

@documentation("User resource is used to manage users.")
resource User {
    identifiers: { userId: UserId }
    create: CreateUser
    read: GetUser
    update: UpdateUser
    delete: DeleteUser
    list: ListUsers
}

@documentation("Creates a new user. Note: User ID is generated by the service.")
operation CreateUser {
    input: CreateUserInput
    output: CreateUserOutput
    errors: [CreateUserError]
}

structure CreateUserInput {
    @required
    username: String

    @required
    email: String
}

structure CreateUserOutput {
    userId: UserId
}

@error("server")
structure CreateUserError {
    message: String
    errorCode: ServerErrorCodes
    target: String
}

@documentation("Details of the user.")
@readonly
operation GetUser {
    input: GetUserInput
    output: GetUserOutput
}

structure GetUserInput {
    @required
    userId: UserId
}

structure GetUserOutput {
    user: UserDetails
}

@documentation("Updates the user.")
operation UpdateUser {
    input: UpdateUserInput
    output: UpdateUserOutput
}

structure UpdateUserInput {
    @required
    userId: UserId
    username: String
    email: String
}

structure UpdateUserOutput {
    userId: UserId
}

@documentation("Deletes the user.")
@idempotent
operation DeleteUser {
    input: DeleteUserInput
    output: DeleteUserOutput
}

structure DeleteUserInput {
    @required
    userId: UserId
}

structure DeleteUserOutput {
    userId: UserId
}

@documentation("Returns a list of users.")

@readonly
@paginated(items: "items")
operation ListUsers {
    input: ListUsersInput
    output: ListUsersOutput
}

structure ListUsersInput {
    nextToken: String
    pageSize: Integer
}

structure ListUsersOutput {
    nextToken: String
    @required
    items: Users
}

list Users {
    member: UserDetails
}

structure UserDetails {
    userId: UserId
    username: String
    email: String
}

@documentation("ID of the user. Must be between 3 and 20 characters long, and can only contain letters, numbers, and underscores.")
@pattern("^[a-zA-Z0-9_]{3,20}$")
string UserId

enum ServerErrorCodes {
    @documentation("""
        This error indicates that the specific service being
        accessed is temporarily unavailable or not implemented."""
    )
    SERVICE_UNAVAILABLE,
    @documentation("""
        This error indicates that an unexpected error 
        occurred in the server, and the cause is not 
        more precisely defined."""
    )
    INTERNAL_SERVER_ERROR,
    @documentation("""
        The requested resource, such as a user, file, or 
            channel, was not found in the system."""
    )
    RESOURCE_NOT_FOUND,
}